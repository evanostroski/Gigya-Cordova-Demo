declare module gigyaClient {

    /**
     * Gets the SDK version
     *
     * @returns {string}
     * @static
     */
    function getVersion():string;

    /**
     * Initializes the Gigya SDK and sets your partner API key.
     *
     * @param {string}  apiKey      Your partner API key.
     * @param {string}  apiDomain   Your partner API domain.
     * @static
     */
    function init(apiKey:string, apiDomain:string):void;

    /**
     * Sends a request to Gigya server. This method is used for invoking any of the methods supported by Gigya's <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API">REST API</a>.
     *
     * @param {string}  APIMethod        The Gigya API method to call, including namespace. For example: "socialize.getUserInfo". Please refer to our <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API" >REST API reference</a> for the list of available methods.
     * @param {object}  [params={}]      An object that contains the parameters for the Gigya API method to call. Please refer to our <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API" >REST API reference</a> and find in the specific method reference the list of method parameters.
     * @param {boolean} [useHTTPS=true]  This parameter determines whether the request to Gigya will be sent over HTTP or HTTPS. default is HTTPS (true).
     * @returns {Promise}
     * @static
     */
    function sendRequest(APIMethod:string, params?:any, useHTTPS?:boolean):Thenable<IResponse>;

    /**
     * Logs in the user with the specified provider.
     *
     * If the provider supports <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-AdditionalProviderConfigurations">native login</a>, it will be used instead of fast-app-switch.
     * Calling this method when the user is already logged in will result in an exception on iOS.
     *
     * @param {string}  provider     The provider's name.
     * @param {object}  [params={}]  An object of optional login parameters. May include the following values:
     *
     *  | Name                       | Type        | Description                                                                         |
     *  |----------------------------|-------------|-------------------------------------------------------------------------------------|
     *  | cid                        | NSString    | A string of maximum 100 characters length. This string will be associated with each transaction and will later appear on reports generated by Gigya, in the "Context ID" combo box. The cid allows you to associate the report information with your own internal data. The "Context ID" combo box lets you filter the report data by application context. |
     *  | facebookReadPermissions    | NSString    | A comma delimited list of Facebook extended permissions to request from the user **when using <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-FacebookNativeLogin">native login</a>**. This parameter gives the possibility to request extended permissions in addition to the permissions that Gigya is already requesting. Please refer to Facebook's <a target="_blank" href="https://developers.facebook.com/docs/reference/login/#permissions">permissions</a> documentation for the complete list of read permissions. Note: you should only include read permissions, otherwise Facebook will fail the login. |
     *  | googleExtraPermissions     | NSString    | This parameter gives the possibility to request extended permissions in addition to the permissions that Gigya is already requesting. The supported values are: "wallet" - for Google wallet permissions. |
     *  | googlePlusExtraPermissions | NSString    | A comma delimited list of Google+ extended permissions to request from the user **when using <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-Google+NativeLogin">native login</a>**. |
     *  | pendingRegistration        | NSNumber    | A Boolean value indicating whether the account should not be considered final until <a target="_blank" href="http://developers.gigya.com/display/GD/socialize.notifyRegistration+REST">socialize.notifyRegistration</a> is called. Default is `YES`. |
     *  | sessionExpiration          | NSNumber    | A time interval that defines the time in seconds that Gigya should keep the login session valid for the user. If this parameter is not specified, the session will be valid forever. |
     *  | forceAuthentication        | NSNumber    | A Boolean value indicating whether the user will be forced to provide his social network credentials during login, even if he is already connected to the social network. Default is `NO` |
     *  | temporaryAccount           | NSNumber    | A Boolean value indicating whether the account is temporary and is only accessible with the associated access token. This means that it is not possible to access the same account, and get the same Gigya UID again by using login. Default is `NO`. |
     *  | loginMode                  | NSString    | (optional) - The type of login being performed<ul><li>standard - (default) the user is logging into an existing account.</li><li>link - the user is linking a social network to an existing account. The account being used to login will become the primary account. When passing loginMode='link', regToken must also be passed to identify the account being linked. This is obtained from the initial login call response.</li><li>reAuth - the user is proving ownership of an existing account by logging into it. The loginID will be ignored and the password verified.</li></ul> |
     *  | regToken                   | NSString    | (optional) This parameter is required for completing the link accounts flow. Once the initial login has failed, call the login method with loginMode=link and the regToken returned from the initial call to complete the linking. For more information go to the <a target="_blank" href="http://developers.gigya.com/display/GD/Linking+Social+Accounts">social account linking guide</a>. |
     *
     * @returns {Promise}
     * @static
     */
    function loginToProvider(provider:string, params?:any):Thenable<IResponse>;

    /**
     * Logs in the user with the specified provider. When the user completes the login process, Gigya will associate the connection with the user's account.
     *
     * If the provider supports <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-AdditionalProviderConfigurations">native login</a>, it will be used instead of fast-app-switch.
     * Calling this method when the user isn't logged in (there is no Gigya session) will result in an exception on iOS.
     *
     * @param {string}  provider     The provider's name.
     * @param {object}  [params={}]  An object of optional login parameters. May include the following values:
     *
     * | Name                       | Type        | Description                                                                         |
     * |----------------------------|-------------|-------------------------------------------------------------------------------------|
     * | cid                        | NSString    | A string of maximum 100 characters length. This string will be associated with each transaction and will later appear on reports generated by Gigya, in the "Context ID" combo box. The cid allows you to associate the report information with your own internal data. The "Context ID" combo box lets you filter the report data by application context. |
     * | facebookReadPermissions    | NSString    | A comma delimited list of Facebook extended permissions to request from the user **when using <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-FacebookNativeLogin">native login</a>**. This parameter gives the possibility to request extended permissions in addition to the permissions that Gigya is already requesting. Please refer to Facebook's <a target="_blank" href="https://developers.facebook.com/docs/reference/login/#permissions">permissions</a> documentation for the complete list of read permissions. Note: you should only include read permissions, otherwise Facebook will fail the login. |
     * | googleExtraPermissions     | NSString    | This parameter gives the possibility to request extended permissions in addition to the permissions that Gigya is already requesting. The supported values are: "wallet" - for Google wallet permissions. |
     * | googlePlusExtraPermissions | NSString    | A comma delimited list of Google+ extended permissions to request from the user **when using <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-FacebookNativeLogin">native login</a>**. |
     *
     * @returns {Promise}
     * @static
     */
    function addConnectionToProvider(provider:string, params?:any):Thenable<IResponse>;

    /**
     * Logs out from Gigya and clears the saved session.
     *
     * If the user has logged in to Facebook or Google+ via <a target="_blank" href="http://developers.gigya.com/display/GD/Cordova#Cordova-AdditionalProviderConfigurations">native login</a>, this method will log out from the corresponding native SDKs as well.
     *
     * @static
     */
    function logout():void;

    /**
     * Renders Gigya <a target="_blank" href="http://developers.gigya.com/display/GD/Plugins">JS Plugins</a> and display them modally.
     *
     * @param {string}  pluginName          A plugin name of a supported plugin, see <GSPluginView> for a list.
     * @param {object}  [params={}]         The parameters passed to the plugin.
     * @param {object}  [pluginEvents={}]   An object of optional event handlers functions that accepts plugin event object as an argument.
     * @static
     */
    function showPlugin(pluginName:string, params?:any, pluginEvents?:any):void;

    /**
     * Adds a global event listener
     *
     * @param {string}    eventName     The event name to listen to.
     * @param {function}  eventHandler  The event handler function that will be called with a CustomEvent object when the event is triggered.
     * @static
     */
    function addEventListener(eventName: string, eventHandler:(event: CustomEvent) => void):void;


    /**
     * Removes a global event listener
     *
     * @param {string}    eventName     The event name to listen to.
     * @param {function}  eventHandler  The event handler function that will be called with a CustomEvent object when the event is triggered.
     * @static
     */
    function removeEventListener(eventName: string, eventHandler:(event: CustomEvent) => void):void;

    /**
     * The Gigya API method to call, including namespace. For example: "socialize.getUserInfo". Please refer to our <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API" >REST API reference</a> for the list of available methods.
     */
    export class Request {
        /**
         * An object that contains the parameters for the Gigya API method to call. Please refer to our <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API" >REST API reference</a> and find in the specific method reference the list of method parameters.
         *
         * @type {object}
         * @default {}
         */
        params:any;

        /**
         * This parameter determines whether the request to Gigya will be sent over HTTP or HTTPS. default is HTTPS (true).
         *
         * @type {boolean}
         * @default true
         */
        useHTTPS:boolean;

        /**
         * constructor
         *
         * @param {string}  APIMethod  The Gigya API method to call, including namespace. For example: "socialize.getUserInfo". Please refer to our <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API" >REST API reference</a> for the list of available methods.
         */
        constructor(APIMethod:string);

        /**
         * Sends a request to Gigya server. This method is used for invoking any of the methods supported by Gigya's <a target="_blank" href="http://developers.gigya.com/display/GD/REST+API">REST API</a>.
         *
         * @returns {Promise}
         */
        send():Thenable<IResponse>;
    }

    /**
     * Gigya response interface
     */
    interface IResponse {
        data: any;
        errorCode: ErrorCodes;
        errorMessage?: string;
        errorDetails?: string;
        exception?: any;
    }

    /**
     * Gigya error-codes
     */
    enum ErrorCodes {
        OK = 0,
        EXPIRED_REQUEST = 403002,
        NETWORK_ERROR = 500026,
        DATA_PENDING = 100001,
        OPERATION_CANCELED = 200001,
        PERMISSION_GRANTED = 200002,
        PERMISSION_NOT_GRANTED = 200003,
        REDIRECT = 200004,
        NEW_USER = 200005,
        OPERATION_DONE = 200006,
        UPDATE_USER = 200007,
        OK_WITH_ERRORS = 200008,
        ACCOUNTS_LINKED = 200009,
        OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS = 200010,
        ACCOUNT_PENDING_REGISTRATION = 206001,
        ACCOUNT_PENDING_VERIFICATION = 206002,
        ACCOUNT_MISSING_LOGINID = 206003,
        IDENTITY_ALREADY_ASSIGNED = 206004,
        AFTER_EMAIL_VERIFICATION = 206005,
        CLIENT_LOG = 300001,
        INVALID_DATA_CENTER = 301001,
        INVALID_REQUEST_FORMAT = 400001,
        MISSING_REQUIRED_PARAMETER = 400002,
        UNIQUE_IDENTIFIER_EXISTS = 400003,
        INVALID_PARAMETER_FORMAT = 400004,
        INVALID_PARAMETER_VALUE = 400006,
        DUPLICATE_VALUE = 400007,
        INVALID_AUTHENTICATION_HEADER = 400008,
        VALIDATION_ERROR = 400009,
        INVALID_REDIRECT_URI = 400011,
        INVALID_RESPONSE_TYPE = 400012,
        UNSUPPORTED_GRANT_TYPE = 400013,
        INVALID_GRANT = 400014,
        CODE_EXPIRED = 400015,
        SCHEMA_VALIDATION_FAILED = 400020,
        CAPTCHA_VERIFICATION_FAILED = 400021,
        UNIQUE_INDEX_VALIDATION_ERROR = 400022,
        INVALID_TYPE_VALIDATION_ERROR = 400023,
        DYNAMIC_FIELDS_VALIDATION_ERROR = 400024,
        WRITE_ACCESS_VALIDATION_ERROR = 400025,
        INVALID_FORMAT_VALIDATION_ERROR = 400026,
        REQUIRED_VALUE_VALIDATION_ERROR = 400027,
        EMAIL_NOT_VERIFIED = 400028,
        SCHEMA_CONFLICT_ERROR = 400029,
        OPERATION_NOT_ALLOWED = 400030,
        SECURITY_VERIFICATION_FAILED = 400050,
        INVALID_APIKEY_PARAMETER = 400093,
        NOT_SUPPORTED = 400096,
        UNSUPPORTED_USER_AGENT = 400097,
        NO_PROVIDERS = 400100,
        POPUP_BLOCKED = 400101,
        INVALID_EVENT_HANDLER = 400102,
        INVALID_CONTAINERID = 400103,
        NOT_CONNECTED = 400106,
        INVALID_SITE_DOMAIN = 400120,
        PROVIDER_CONFIGURATION_ERROR = 400122,
        LIMIT_REACHED = 400124,
        FREQUENCY_LIMIT_REACHED = 400125,
        INVALID_ACTION = 400126,
        INSUFFICIENT_POINTS_TO_REDEEM = 400127,
        SIGNATURE_TIMESTAMP_EXPIRED = 400128,
        INVALID_POLICY_CONFIGURATION = 401000,
        SUSPECTED_SPAM = 401010,
        LOGIN_FAILED_CAPTCHA_REQUIRED = 401020,
        LOGIN_FAILED_WRONG_CAPTCHA = 401021,
        OLD_PASSWORD_USED = 401030,
        FORBIDDEN = 403000,
        INVALID_SESSION_TOKEN = 403001,
        REQUEST_HAS_EXPIRED = 403002,
        INVALID_REQUEST_SIGNATURE = 403003,
        DUPLICATE_NONCE = 403004,
        UNAUTHORIZED_USER = 403005,
        SENSITIVE_DATA_SENT_OVER_HTTP = 403006,
        PERMISSION_DENIED = 403007,
        INVALID_OPENID_URL = 403008,
        PROVIDER_SESSION_EXPIRED = 403009,
        INVALID_SECRET = 403010,
        SESSION_HAS_EXPIRED = 403011,
        NO_VALID_SESSION = 403012,
        UNVERIFIED_USER = 403013,
        MISSING_REQUEST_REFERRER = 403015,
        UNEXPECTED_PROVIDER_USER = 403017,
        PERMISSION_NOT_REQUESTED = 403022,
        NO_USER_PERMISSION = 403023,
        PROVIDER_LIMIT_REACHED = 403024,
        INVALID_TOKEN = 403025,
        UNAUTHORIZED_ACCESS_ERROR = 403026,
        DIFFERENT_USER_FOR_REAUTH = 403027,
        SESSION_EXPIRED_RETRY = 403030,
        APPROVED_BY_MODERATOR = 403031,
        NO_USER_COOKIE = 403035,
        UNAUTHORIZED_PARTNER = 403036,
        POST_DENIED = 403037,
        NO_LOGIN_TICKET = 403040,
        ACCOUNT_DISABLED = 403041,
        INVALID_LOGINID = 403042,
        LOGIN_IDENTIFIER_EXISTS = 403043,
        UNDERAGE_USER = 403044,
        INVALID_SITE_CONFIGURATION_ERROR = 403045,
        LOGINID_DOES_NOT_EXIST = 403047,
        API_RATE_LIMIT_EXCEEDED = 403048,
        PENDING_PASSWORD_CHANGE = 403100,
        ACCOUNT_PENDING_TFA_VERIFICATION = 403101,
        ACCOUNT_PENDING_TFA_REGISTRATION = 403102,
        ACCOUNT_PENDING_RECENT_LOGIN = 403110,
        ACCOUNT_TEMPORARILY_LOCKED_OUT = 403120,
        REDUNDANT_OPERATION = 403200,
        INVALID_APPLICATION_ID = 403201,
        NOT_FOUND = 404000,
        FRIEND_NOT_FOUND = 404001,
        CATEGORY_NOT_FOUND = 404002,
        UID_NOT_FOUND = 404003,
        RESOURCE_NOT_FOUND = 404004,
        INVALID_API_METHOD = 405001,
        IDENTITY_EXISTS = 409001,
        GONE = 410000,
        REQUEST_ENTITY_TOO_LARGE = 413001,
        COMMENT_TEXT_TOO_LARGE = 413002,
        OBJECT_TOO_LARGE = 413003,
        PROFILE_PHOTO_TOO_LARGE = 413004,
        REQUEST_URI_TOO_LONG = 414000,
        MISSING_USER_PHOTO = 409010,
        COUNTER_NOT_REGISTERED = 409011,
        INVALID_GMID_TICKET = 409012,
        SAML_MAPPED_ATTRIBUTE_NOT_FOUND = 409013,
        SAML_CERTIFICATE_NOT_FOUND = 409014,
        SAML_MESSAGE_NOT_FOUND = 409015,
        GENERAL_SERVER_ERROR = 500001,
        SERVER_LOGIN_ERROR = 500002,
        DEFAULT_APPLICATION_CONFIGURATION_ERROR = 500003,
        SESSION_MIGRATION_ERROR = 500014,
        PROVIDER_ERROR = 500023,
        DATABASE_ERROR = 500028,
        USERNAME_REQUIRED = 500029,
        NO_PROVIDER_APPLICATION = 500031,
        LOAD_FAILED = 500032,
        INVALID_ENVIRONMENT_CONFIG = 500033,
        ERROR_DURING_BACKEND_OPERATION = 500034,
        TIMEOUT = 504001,
        CLIENT_TIMEOUT = 504002,
        INVALID_URL = 404004,
        MEDIA_ITEMS_NOT_SUPPORTED = 401001,
        MISSING_ERROR_CODE = 599999,
    }

    /**
     * Gigya event types
     */
    export class Event {
        static LOGIN:string;
        static LOGOUT:string;
    }
}

interface Thenable<R> {
    then<U>(onFulfilled?:(value:R) => U | Thenable<U>, onRejected?:(error:any) => U | Thenable<U>): Thenable<U>;
    then<U>(onFulfilled?:(value:R) => U | Thenable<U>, onRejected?:(error:any) => void): Thenable<U>;
    catch<U>(onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
}